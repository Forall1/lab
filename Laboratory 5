Basic Task 

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void displayMenu();
void allocateMemory(int ***array, int n, int m);
void inputElements(int **array, int n, int m);
void fillRandom(int **array, int n, int m);
void sortOddRows(int **array, int n, int m);
void displayElements(int **array, int n, int m);
void deallocateMemory(int **array, int n);

void displayMenu() {
    printf("\nMenu Options:\n");
    printf("1. Allocate memory for the 2D array\n");
    printf("2. Input elements from the keyboard\n");
    printf("3. Fill the array with random values\n");
    printf("4. Sort rows using Selection Sort\n");
    printf("5. Display elements\n");
    printf("6. Deallocate memory\n");
    printf("0. Exit program\n");
}

void allocateMemory(int ***array, int n, int m) {
    int i;
    *array = (int **)malloc(n * sizeof(int *));
    for (i = 0; i < n; i++) {
        (*array)[i] = (int *)malloc(m * sizeof(int));
    }
    printf("Memory allocated successfully.\n");
}

void inputElements(int **array, int n, int m) {
    int i, j;
    printf("Enter the elements for the %d x %d array:\n", n, m);
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            scanf("%d", &array[i][j]);
        }
    }
}

void fillRandom(int **array, int n, int m) {
    int i, j;
    srand(time(NULL));
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            array[i][j] = rand() % 100;
        }
    }
    printf("Array filled with random values.\n");
}

void sortOddRows(int **array, int n, int m) {
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n - 1; j++) {
            int minIndex = j;
            for (int k = j + 1; k < n; k++) {
                if (array[i][k] < array[i][minIndex]) {
                    minIndex = k;
                }
            }
            if (minIndex != j) {
                int temp = array[i][j];
                array[i][j] = array[i][minIndex];
                array[i][minIndex] = temp;
            }
        }
    }
    printf("Rows were sorted.\n");
}

void displayElements(int **array, int n, int m) {
    printf("The 2D Array elements:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            printf("%d ", array[i][j]);
        }
        printf("\n");
    }
}

void deallocateMemory(int **array, int n) {
    for (int i = 0; i < n; i++) {
        free(array[i]);
    }
    free(array);
    array = NULL;
    printf("Memory deallocated successfully.\n");
}




int main() {
    int n, m;
    int **array = NULL;
    int choice;

    printf("Enter the number of rows (n): ");
    scanf("%d", &n);
    printf("Enter the number of columns (m): ");
    scanf("%d", &m);

    allocateMemory(&array, n, m);

    do {
        displayMenu();
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                allocateMemory(&array, n, m);
                break;
            case 2:
                inputElements(array, n, m);
                break;
            case 3:
                fillRandom(array, n, m);
                break;
            case 4:
                sortOddRows(array, n, m);
                break;
            case 5:
                displayElements(array, n, m);
                break;
            case 6:
                deallocateMemory(array, n);
                break;
            case 0:
                printf("Exiting program.\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
                break;
        }
    } while (choice != 0);

    return 0;
}

//3.1 Piece of cake - 1#

#include <iostream>
#include <cstdlib> // for malloc and free

void printIntegerValue() {
    
    int* integerVariable = (int*)malloc(sizeof(int));
    if (integerVariable == nullptr) {
        std::cerr << "Memory allocation failed." << std::endl;
        return;
    }

    *integerVariable = 42; // Assign a value to the integer variable

    std::cout << "The value of the integer variable is: " << *integerVariable << std::endl;

    // Deallocate memory
    free(integerVariable);
}

int main() {
    printIntegerValue();

    return 0;
}


//3.1 Piece of cake - 2#


#include <iostream>
#include <cstdlib>

void swapIntegers(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int main() {
    int n, m;

    std::cout << "Enter the value of n: ";
    std::cin >> n;
    std::cout << "Enter the value of m: ";
    std::cin >> m;

    std::cout << "Before swapping: n = " << n << ", m = " << m << std::endl;

    swapIntegers(&n, &m);

    std::cout << "After swapping: m = " << m << ", n = " << n << std::endl;

    return 0;
}



_____________


3.2 - 1#

#include <iostream>
#include <cstdlib>

void findMinMax(int* arr, int size, int* min, int* max) {
    if (size <= 0) {
        std::cerr << "Array size must be greater than 0." << std::endl;
        return;
    }

    *min = *max = arr[0];  // Initialize min and max to the first element

    for (int i = 1; i < size; i++) {
        if (arr[i] < *min) {
            *min = arr[i];  // Update min
        } else if (arr[i] > *max) {
            *max = arr[i];  // Update max
        }
    }
}

int main() {
    int size;

    std::cout << "Enter the size of the array: ";
    std::cin >> size;

    if (size <= 0) {
        std::cerr << "Array size must be greater than 0." << std::endl;
        return 1;
    }


   int* arr = (int*)malloc(size * sizeof(int));
    if (arr == nullptr) {
        std::cerr << "Memory allocation failed." << std::endl;
        return 1;
    }


       for (int i = 0; i < size; i++) {
        std::cout << "Enter element " << i + 1 << ": ";
        std::cin >> arr[i];
    }

    int min, max;
    findMinMax(arr, size, &min, &max);

    std::cout << "Smallest value: " << min << std::endl;
    std::cout << "Largest value: " << max << std::endl;

    // Deallocate memory for the array
    free(arr);

    return 0;
}

_____________________________


3.2 - 2#

#include <iostream>
#include <cstdlib>

int sumOfNegatives(int* arr, int size) {
    int sum = 0;

    for (int i = 0; i < size; i++) {
        if (*(arr + i) < 0) {
            sum += *(arr + i);
        }
    }

    return sum;
}

int main() {
    int size;

    std::cout << "Enter the size of the array: ";
    std::cin >> size;

    if (size <= 0) {
        std::cerr << "Array size must be greater than 0." << std::endl;
        return 1;
    }

    int* arr = (int*)malloc(size * sizeof(int));
    if (arr == nullptr) {
        std::cerr << "Memory allocation failed." << std::endl;
        return 1;
    }

    for (int i = 0; i < size; i++) {
        std::cout << "Enter element " << i + 1 << ": ";
        std::cin >> *(arr + i);
    }

    int result = sumOfNegatives(arr, size);

    std::cout << "Sum of negative numbers: " << result << std::endl;

    free(arr);

    return 0;
}


_______________________

3.2 - 3#

#include <iostream>
#include <cstdlib>

void reverseArray(int* arr, int size) {
    int* start = arr;
    int* end = arr + size - 1;

    while (start < end) {
        // Swap the elements pointed to by 'start' and 'end'
        int temp = *start;
        *start = *end;
        *end = temp;

        // Move the pointers inward
        start++;
        end--;
    }
}

int main() {
    int size;

    std::cout << "Enter the size of the array: ";
    std::cin >> size;

    if (size <= 0) {
        std::cerr << "Array size must be greater than 0." << std::endl;
        return 1;
    }

    int* arr = (int*)malloc(size * sizeof(int));
    if (arr == nullptr) {
        std::cerr << "Memory allocation failed." << std::endl;
        return 1;
    }

    for (int i = 0; i < size; i++) {
        std::cout << "Enter element " << i + 1 << ": ";
        std::cin >> *(arr + i);
    }

    reverseArray(arr, size);

    std::cout << "Reversed array:" << std::endl;
    for (int i = 0; i < size; i++) {
        std::cout << *(arr + i) << " ";
    }

    free(arr);

    return 0;
}


____________________

3.2 - 4#

#include <iostream>
#include <cstdlib>

void transposeMatrix(int** matrix, int n, int m) {
    int** transposedMatrix = (int**)malloc(m * sizeof(int*));
    for (int i = 0; i < m; i++) {
        transposedMatrix[i] = (int*)malloc(n * sizeof(int));
    }

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            transposedMatrix[j][i] = matrix[i][j];
        }
    }

    // Deallocate the original matrix
    for (int i = 0; i < n; i++) {
        free(matrix[i]);
    }
    free(matrix);

    *matrix = transposedMatrix;
}

void printMatrix(int** matrix, int n, int m) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            std::cout << matrix[i][j] << " ";
        }
        std::cout << std::endl;
    }
}

int main() {
    int n, m;

    std::cout << "Enter the number of rows and columns (n=m): ";
    std::cin >> n >> m;

    if (n <= 0 || m <= 0) {
        std::cerr << "Matrix size must be greater than 0." << std::endl;
        return 1;
    }

    int** matrix = (int**)malloc(n * sizeof(int*));
    for (int i = 0; i < n; i++) {
        matrix[i] = (int*)malloc(m * sizeof(int));
    }

    std::cout << "Enter the elements of the matrix:" << std::endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            std::cout << "Enter element at [" << i << "][" << j << "]: ";
            std::cin >> matrix[i][j];
        }
    }

    std::cout << "Original Matrix:" << std::endl;
    printMatrix(matrix, n, m);

    transposeMatrix(matrix, n, m);

    std::cout << "Transposed Matrix:" << std::endl;
    printMatrix(matrix, m, n);

    for (int i = 0; i < m; i++) {
        free(matrix[i]);
    }
    free(matrix);

    return 0;
}

________________________

3.3 Medium - 1#

#include <iostream>
#include <cstdlib>

int findIndexOfValue(int* arr, int size, int value) {
    for (int i = 0; i < size; i++) {
        if (*(arr + i) == value) {
            return i; // Return the index of the first occurrence
        }
    }

    return -1; // Return -1 if the value is not found
}

int main() {
    int k, n, m;

    std::cout << "Enter the length of the array (k): ";
    std::cin >> k;

    if (k <= 0) {
        std::cerr << "Array length must be greater than 0." << std::endl;
        return 1;
    }

    int* arr = (int*)malloc(k * sizeof(int));
    if (arr == nullptr) {
        std::cerr << "Memory allocation failed." << std::endl;
        return 1;
    }

    std::cout << "Enter the elements of the array:" << std::endl;
    for (int i = 0; i < k; i++) {
        std::cout << "Enter element " << i + 1 << ": ";
        std::cin >> *(arr + i);
    }

    int searchValue;
    std::cout << "Enter the value to search for: ";
    std::cin >> searchValue;

    int index = findIndexOfValue(arr, k, searchValue);

    if (index != -1) {
        std::cout << "The first occurrence of " << searchValue << " is at index: " << index << std::endl;
    } else {
        std::cout << searchValue << " not found in the array." << std::endl;
    }

    free(arr);

    return 0;
}
_______________________

3.3 Medium - 4#

#include <iostream>
#include <cstdlib>

void calculateRowColumnSums(int** matrix, int n, int m, int* rowSums, int* columnSums) {
    // Initialize row and column sums to 0
    for (int i = 0; i < n; i++) {
        rowSums[i] = 0;
    }
    for (int j = 0; j < m; j++) {
        columnSums[j] = 0;
    }

    // Calculate row sums
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            rowSums[i] += matrix[i][j];
        }
    }

    // Calculate column sums
    for (int j = 0; j < m; j++) {
        for (int i = 0; i < n; i++) {
            columnSums[j] += matrix[i][j];
        }
    }
}

void printSums(int* sums, int size, const char* label) {
    std::cout << label << ": ";
    for (int i = 0; i < size; i++) {
        std::cout << sums[i] << " ";
    }
    std::cout << std::endl;
}

int main() {
    int k, n, m;

    // Prompt the user to enter the size of the matrix
    std::cout << "Enter the number of rows and columns (n=m): ";
    std::cin >> n >> m;

    if (n <= 0 || m <= 0) {
        std::cerr << "Matrix size must be greater than 0." << std::endl;
        return 1;
    }

    int** matrix = (int**)malloc(n * sizeof(int*));
    for (int i = 0; i < n; i++) {
        matrix[i] = (int*)malloc(m * sizeof(int));
    }

    std::cout << "Enter the elements of the matrix:" << std::endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            std::cout << "Enter element at [" << i << "][" << j << "]: ";
            std::cin >> matrix[i][j];
        }
    }

    // Dynamically allocate memory for row and column sums
    int* rowSums = (int*)malloc(n * sizeof(int));
    int* columnSums = (int*)malloc(m * sizeof(int));

    // Calculate row and column sums
    calculateRowColumnSums(matrix, n, m, rowSums, columnSums);

    // Print row and column sums
    printSums(rowSums, n, "Row Sums");
    printSums(columnSums, m, "Column Sums");

    for (int i = 0; i < n; i++) {
        free(matrix[i]);
    }
    free(matrix);
    free(rowSums);
    free(columnSums);

    return 0;
}















