#include <iostream>
#include <string>
#include <fstream>

const int MAX_BUFFER_SIZE = 1000;

class TextEditor {
private:
    std::string buffer[MAX_BUFFER_SIZE];
    int bufferLength = 0;

public:
    // Append text to the buffer
    void EnterText(const std::string& text) {
        if (bufferLength < MAX_BUFFER_SIZE) {
            buffer[bufferLength++] = text;
            std::cout << "Text appended to the buffer.\n";
        } else {
            std::cerr << "Buffer is full. Cannot append more text.\n";
        }
    }

    int SearchWord(const std::string& word) {
        int count = 0;
        for (int i = 0; i < bufferLength; i++) {
            size_t pos = 0;
            while ((pos = buffer[i].find(word, pos)) != std::string::npos) {
                count++;
                pos += word.length();
            }
        }
        return count;
    }

    void ReplaceWord(const std::string& word, const std::string& replacement) {
        for (int i = 0; i < bufferLength; i++) {
            size_t pos = 0;
            while ((pos = buffer[i].find(word, pos)) != std::string::npos) {
                buffer[i].replace(pos, word.length(), replacement);
                pos += replacement.length();
            }
        }
        std::cout << "Word replaced in the buffer.\n";
    }

    void Delete() {
        bufferLength = 0;
        std::cout << "Buffer deleted.\n";
    }

    void SaveToFile(const std::string& filename) {
        std::ofstream file(filename);
        if (file.is_open()) {
            for (int i = 0; i < bufferLength; i++) {
                file << buffer[i] << "\n";
            }
            file.close();
            std::cout << "File saved successfully.\n";
        } else {
            std::cerr << "Error: Unable to open the file for writing.\n";
        }
    }

    void LoadFromFile(const std::string& filename) {
        std::ifstream file(filename);
        if (file.is_open()) {
            bufferLength = 0;
            std::string line;
            while (std::getline(file, line) && bufferLength < MAX_BUFFER_SIZE) {
                buffer[bufferLength++] = line;
            }
            file.close();
            std::cout << "File loaded successfully.\n";
        } else {
            std::cerr << "Error: Unable to open the file for reading.\n";
        }
    }

    void DisplayBuffer() {
        for (int i = 0; i < bufferLength; i++) {
            std::cout << buffer[i] << "\n";
        }
    }
};

int main() {
    TextEditor editor;
    int choice;
    std::string input;
    std::string replacement; // Declare 'replacement' here

    while (true) {
        std::cout << "\nText Editor Menu:\n";
        std::cout << "1. Enter Text\n";
        std::cout << "2. Search for Word\n";
        std::cout << "3. Replace Word\n";
        std::cout << "4. Delete\n";
        std::cout << "5. Save to File\n";
        std::cout << "6. Load from File\n";
        std::cout << "7. Display Buffer\n";
        std::cout << "8. Exit\n";
        std::cout << "Enter your choice: ";

        std::cin >> choice;
        std::cin.ignore(); // Consume the newline character

        switch (choice) {
            case 1:
                std::cout << "Enter text to append: ";
                std::getline(std::cin, input);
                editor.EnterText(input);
                break;
            case 2:
                std::cout << "Enter word to search: ";
                std::getline(std::cin, input);
                std::cout << "Occurrences: " << editor.SearchWord(input) << "\n";
                break;
            case 3:
                std::cout << "Enter word to replace: ";
                std::getline(std::cin, input);
                std::cout << "Enter replacement word: ";
                std::getline(std::cin, replacement); // Use 'replacement' here
                editor.ReplaceWord(input, replacement);
                break;
            case 4:
                editor.Delete();
                break;
            case 5:
                std::cout << "Enter filename to save: ";
                std::getline(std::cin, input);
                editor.SaveToFile(input);
                break;
            case 6:
                std::cout << "Enter filename to load: ";
                std::getline(std::cin, input);
                editor.LoadFromFile(input);
                break;
            case 7:
                std::cout << "\nBuffer Contents:\n";
                editor.DisplayBuffer();
                break;
            case 8:
                std::cout << "Exiting the program.\n";
                return 0;
            default:
                std::cout << "Invalid choice. Try again.\n";
        }
    }

    return 0;
}

